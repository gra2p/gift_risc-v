# s0, s1 : plaintext/ciphertext
# a0-a7 : key
# s2 : s-box address 
# s3, s4 : temporary
# s5 : round constant
# s6 : while counter
# s10-s11: benchmarking

.macro Subst dst, src
	and t0, \src, 0xf
	add t1, s2, t0 # compute the address of the new nibble
	lb t1, 0(t1)
	sll t1, t1, 28

	srl \src, \src, 4
	srl \dst, \dst, 4
	
	or \dst, \dst, t1
.endm

.macro SubCells x
	Subst s3, \x
	Subst s3, \x
	Subst s3, \x
	Subst s3, \x

	Subst s3, \x
	Subst s3, \x
	Subst s3, \x
	Subst s3, \x

	mv \x, s3
.endm

.macro RightShift dst, src, mask, shift
	li t0, \mask
	and t0, \src, t0
	srl t0, t0, \shift
	or \dst, \dst, t0
.endm

.macro LeftShift dst, src, mask, shift
	li t0, \mask
	and t0, \src, t0
	sll t0, t0, \shift
	or \dst, \dst, t0
.endm

.macro PermBits
	mv s3, zero
	mv s4, zero
	RightShift s4, s0, 0x80000000, 16
	LeftShift s3, s0, 0x40000100, 0
	RightShift s3, s0, 0x20000000, 16
	LeftShift s4, s0, 0x10000400, 0
	LeftShift s4, s0, 0x8000020, 4
	RightShift s4, s0, 0x4000000, 12
	LeftShift s3, s0, 0x2000080, 4
	RightShift s3, s0, 0x1000000, 12
	RightShift s3, s0, 0x800000, 8
	LeftShift s4, s0, 0x400001, 8
	RightShift s4, s0, 0x200000, 8
	LeftShift s3, s0, 0x100004, 8
	LeftShift s3, s0, 0x84000, 12
	RightShift s3, s0, 0x42000, 4
	LeftShift s4, s0, 0x21000, 12
	RightShift s4, s0, 0x18000, 4
	LeftShift s4, s0, 0x800, 16
	LeftShift s3, s0, 0x200, 16
	LeftShift s4, s0, 0x40, 20
	LeftShift s3, s0, 0x10, 20
	LeftShift s3, s0, 0x8, 24
	LeftShift s4, s0, 0x2, 24
	RightShift s4, s1, 0x80000000, 24
	RightShift s3, s1, 0x40000100, 8
	RightShift s3, s1, 0x20000000, 24
	RightShift s4, s1, 0x10000400, 8
	RightShift s4, s1, 0x8000020, 4
	RightShift s4, s1, 0x4000000, 20
	RightShift s3, s1, 0x2000080, 4
	RightShift s3, s1, 0x1000000, 20
	RightShift s3, s1, 0x800000, 16
	LeftShift s4, s1, 0x400001, 0
	RightShift s4, s1, 0x200000, 16
	LeftShift s3, s1, 0x100004, 0
	LeftShift s3, s1, 0x84000, 4
	RightShift s3, s1, 0x42000, 12
	LeftShift s4, s1, 0x21000, 4
	RightShift s4, s1, 0x18000, 12
	LeftShift s4, s1, 0x800, 8
	LeftShift s3, s1, 0x200, 8
	LeftShift s4, s1, 0x40, 12
	LeftShift s3, s1, 0x10, 12
	LeftShift s3, s1, 0x8, 16
	LeftShift s4, s1, 0x2, 16
	mv s0, s3
	mv s1, s4
.endm

.macro ExpandKey dst0, dst1, src
	and \dst1, \src, 0x1
	LeftShift \dst1, \src, 0x2, 3
	LeftShift \dst1, \src, 0x4, 6
	LeftShift \dst1, \src, 0x8, 9
	LeftShift \dst1, \src, 0x10, 12
	LeftShift \dst1, \src, 0x20, 15
	LeftShift \dst1, \src, 0x40, 18
	LeftShift \dst1, \src, 0x80, 21

	mv \dst0, zero
	RightShift \dst0, \src, 0x100, 8
	RightShift \dst0, \src, 0x200, 5
	RightShift \dst0, \src, 0x400, 2
	LeftShift \dst0, \src, 0x800, 1
	LeftShift \dst0, \src, 0x1000, 4
	LeftShift \dst0, \src, 0x2000, 7
	LeftShift \dst0, \src, 0x4000, 10
	LeftShift \dst0, \src, 0x8000, 13
.endm

.macro UpdateKey 
	li t0, 0xfff
	and t0, a0, t0
	srl t1, a0, 12
	sll t0, t0, 4

	and t2, a1, 0x3
	srl t3, a1, 2
	sll t2, t2, 14
	
	mv a0, a2
	mv a1, a3
	mv a2, a4
	mv a3, a5
	mv a4, a6
	mv a5, a7
	or a6, t0, t1 
	or a7, t2, t3
.endm

.section .text
	.globl main
	
	main:
		la t0, encrypt
		jalr zero, 0(t0)

.section .itim,"ax",@progbits
	.globl encrypt

	encrypt:
		la s2, s_box # s_box address 
		la s5, const # round constant

		la s0, txt2_e # plaintext
		lw s1, 4(s0)
		lw s0, 0(s0) 

		la t0, key2 # key
		lw a0, 28(t0)
		lw a1, 24(t0)
		lw a2, 20(t0)
		lw a3, 16(t0)
		lw a4, 12(t0)
		lw a5, 8(t0)
		lw a6, 4(t0)
		lw a7, 0(t0)

		li s6, 28 # while counter
		DO:
			#---SubCells---
			SubCells s0
			SubCells s1
			#---PermBits---
			PermBits
			#---AddRoundKey---
			ExpandKey s3, s4, a0

			xor s0, s0, s3
			xor s1, s1, s4

			ExpandKey s3, s4, a1
			sll s3, s3, 1
			sll s4, s4, 1

			xor s0, s0, s3
			xor s1, s1, s4

			#-----Add Round Constant-----
			lw t0, 0(s5)
			xor s1, s1, t0

			li t0, 0x80000000
			xor s0, s0, t0
			#-----Update Round Key-----
			UpdateKey
			#-----Update Round Constant-----
			add s5, s5, 4
		
		add s6, s6, -1
		WHILE: bne s6, zero, DO

	END: j END

.section .data

	txt2_e: .word 0xfedcba98, 0x76543210  
	key2: .word 0xfedc, 0xba98, 0x7654, 0x3210, 0xfedc, 0xba98, 0x7654, 0x3210 

	const: .word 0x8,0x88,0x888,0x8888,0x88888,0x888880,0x888808, 0x888088,0x880888,0x808888,0x88880,0x888800,0x888008,0x880088, 0x800888,0x8880,0x88808,0x888080,0x880808,0x808088,0x80880, 0x808800,0x88000,0x880000,0x800008,0x80,0x808,0x8088

	s_box: .byte 0x1, 0xa, 0x4, 0xc, 0x6, 0xf, 0x3, 0x9, 0x2, 0xd, 0xb, 0x7, 0x5, 0x0, 0x8, 0xe

	