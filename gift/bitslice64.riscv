# s0 - s3 : plaintext
# a0 - a7 : key
# s10 : while counter
# s4: round constant
# s11, s9 - s5 : constants

.section .text
	.globl main
	
	main:
		la t0, encrypt
		jalr zero, 0(t0)

.section .itim,"ax",@progbits
	.globl encrypt

	encrypt:
		#---Initialization---
		li s11, 0xffff # CONSTANT VALUE
		li s9, 0x0a0a # CONSTANT VALUE
		li s8, 0x3300 # CONSTANT VALUE
		li s7, 0x00cc # CONSTANT VALUE
		li s6, 0xa5a5 # CONSTANT VALUE
		li s5, 0xcc33 # CONSTANT VALUE

		la s4, const # round constant

		la t0, txt2_e # load plaintext
		lh s0, 0(t0) # Slice 0
		and s0, s0, s11
		lh s1, 2(t0) # Slice 1
		and s1, s1, s11
		lh s2, 4(t0) # Slice 2
		and s2, s2, s11
		lh s3, 6(t0) # Slice 3
		and s3, s3, s11
		
		la t0, key2 # load key
		lh a0, 14(t0)
		and a0, a0, s11
		lh a1, 12(t0)
		and a1, a1, s11
		lh a2, 10(t0)
		and a2, a2, s11
		lh a3, 8(t0)
		and a3, a3, s11
		lh a4, 6(t0)
		and a4, a4, s11
		lh a5, 4(t0)
		and a5, a5, s11
		lh a6, 2(t0)
		and a6, a6, s11
		lh a7, 0(t0)
		and a7, a7, s11
		
		li s10, 28
		DO:
			#---SubCells---
			SubCells:
			and t0, s0, s2
			xor s1, s1, t0 # x[1] = x[1] XOR (x[0] AND x[2])
			and t0, s1, s3
			xor t0, s0, t0 # t = x[0] XOR (x[1] AND x[3])
			or t1, t0, s1
			xor s2, s2, t1 # x[2] = x[2] XOR (t OR x[1])
			xor s0, s3, s2 # x[0] = x[3] XOR x[2]
			xor s1, s1, s0 # x[1] = x[1] XOR x[0]
			xor s0, s0, s11 # x[0] = NOT x[0]
			and t1, t0, s1 
			xor s2, s2, t1 # x[2] = x[2] XOR (t AND x[1])
			mv s3, t0 # x[3] = t

			#---PermBits---
			PermBits:
			#-----Slice 0-----
			#-------Transpose-------
			li t0, 0x5050
			and t0, s0, t0 # mask 0x5050
			srli t0, t0, 3 # >> 3
			and t1, s0, s9 # mask 0x0a0a
			slli t1, t1, 3 # << 3
			and s0, s0, s6 # mask 0xa5a5
			or s0, s0, t0 
			or s0, s0, t1 

			and t0, s0, s8 # mask 0x3300
			srli t0, t0, 6 # >> 6
			and t1, s0, s7 # mask 0x00cc
			slli t1, t1, 6 # << 6
			and s0, s0, s5 # mask 0xcc33
			or s0, s0, t0
			or s0, s0, t1
			#-------Switch rows-------
			li t2, 0xf000
			and t0, s0, t2 # extract row 1
			srli t0, t0, 8 # move row 1 to the position of row 3
			andi t1, s0, 0xf0 # extract row 3
			slli t1, t1, 8 # move row 3 to the position of row 1
			li t2, 0x0f0f
			and s0, s0, t2 # mask 0x0f0f clear place for row 1 and 3
			or s0, s0, t0 # insert row 1
			or s0, s0, t1 # insert row 3
			#-----Slice 1-----
			#-------Transpose-------
			li t0, 0x5050
			and t0, s1, t0 # mask 0x5050
			srli t0, t0, 3 # >> 3
			and t1, s1, s9 # mask 0x0a0a
			slli t1, t1, 3 # << 3
			and s1, s1, s6 # mask 0xa5a5
			or s1, s1, t0 
			or s1, s1, t1 

			and t0, s1, s8 # mask 0x3300
			srli t0, t0, 6 # >> 6
			and t1, s1, s7 # mask 0x00cc
			slli t1, t1, 6 # << 6
			and s1, s1, s5 # mask 0xcc33
			or s1, s1, t0
			or s1, s1, t1
			#-------Switch rows-------
			li t1, 0xf0f0
			and t1, s1, t1 # mask 0xf0f0
			srli t1, t1, 4 # row 1 -> 2 and row 3 -> 4
			li t0, 0x0f0f
			and t0, s1, t0 # mask 0x0f0f
			slli s1, t0, 4 # row 2 -> 1 and row 4 -> 3
			or s1, s1, t1 
			#-----Slice 2-----
			#-------Transpose-------
			li t0, 0x5050
			and t0, s2, t0 # mask 0x5050
			srli t0, t0, 3 # >> 3
			and t1, s2, s9 # mask 0x0a0a
			slli t1, t1, 3 # << 3
			and s2, s2, s6 # mask 0xa5a5
			or s2, s2, t0 
			or s2, s2, t1 

			and t0, s2, s8 # mask 0x3300
			srli t0, t0, 6 # >> 6
			and t1, s2, s7 # mask 0x00cc
			slli t1, t1, 6 # << 6
			and s2, s2, s5 # mask 0xcc33
			or s2, s2, t0
			or s2, s2, t1
			#-------Switch rows-------
			li t0, 0x0f00
			and t1, s2, t0 # mask 0x0f00
			srli t1, t1, 8 # row 2 -> 4
			andi t0, s2, 0xf # mask 0x000f
			slli t0, t0, 8 # row 4 -> 2
			li t2, 0xf0f0
			and s2, s2, t2 # clean space for row 2 and 4
			or s2, s2, t0 
			or s2, s2, t1 
			#-----Slice 3-----
			#-------Transpose-------
			li t0, 0x5050
			and t0, s3, t0 # mask 0x5050
			srli t0, t0, 3 # >> 3
			and t1, s3, s9 # mask 0x0a0a
			slli t1, t1, 3 # << 3
			and s3, s3, s6 # mask 0xa5a5
			or s3, s3, t0 
			or s3, s3, t1 

			and t0, s3, s8 # mask 0x3300
			srli t0, t0, 6 # >> 6
			and t1, s3, s7 # mask 0x00cc
			slli t1, t1, 6 # << 6
			and s3, s3, s5 # mask 0xcc33
			or s3, s3, t0
			or s3, s3, t1
			#-------Switch rows-------
			li t0, 0xf000
			li t4, 0xf00
			and t1, s3, t0 # mask 0xf000
			srli t1, t1, 12 # >> 12
			and t2, s3, t4 # mask 0x0f00
			srli t2, t2, 4 # >> 4
			and t3, s3, 0xf0 # mask 0x00f0
			slli t3, t3, 4 # << 4
			and s3, s3, 0xf # mask 0x000f
			slli s3, s3, 12 # << 12
			or s3, s3, t1
			or s3, s3, t2
			or s3, s3, t3
			
			#---AddRoundKey---
			AddRoundKey:
			xor s0, s0, a0 # apply V
			xor s1, s1, a1 # apply U
			#-----Add Round Constant-----
			lb t0, 0(s4) # load round constant
			xor s3, s3, t0 # apply round constant 
			li t0, 0x8000 
			xor s3, s3, t0 # b[n-1] <- b[n-1] xor 1

			#---KeySchedule---
			slli t0, a0, 20 # isolate right-most 12 bits
			srli a0, a0, 12 # >> 12
			srli t0, t0, 16 # move isolated bits to the right position
			or a0, a0, t0 # >>> 12
			
			andi t0, a1, 0x3 # isolate right-most 2 bits
			srli a1, a1, 2 # >> 2
			slli t0, t0, 14 # move isolated bits to the right position
			or a1, a1, t0 # >>> 2

			mv t0, a0
			mv t1, a1
			mv a0, a2
			mv a1, a3
			mv a2, a4
			mv a3, a5
			mv a4, a6
			mv a5, a7
			mv a6, t0
			mv a7, t1
			#-----Update Round Constant-----
			addi s4, s4, 1
		
		addi s10, s10, -1
		WHILE: bne s10, zero, DO

		END: j END

.section .data

	txt2_e: .half 0xaaaa, 0xcccc, 0xf0f0, 0xff00
	key2: .half 0xfedc, 0xba98, 0x7654, 0x3210, 0xfedc, 0xba98, 0x7654, 0x3210 

	const: .byte 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3E, 0x3D, 0x3B, 0x37, 0x2F, 0x1E, 0x3C, 0x39, 0x33, 0x27, 0x0E, 0x1D, 0x3A, 0x35, 0x2B, 0x16, 0x2C, 0x18, 0x30, 0x21, 0x02, 0x05, 0x0B
